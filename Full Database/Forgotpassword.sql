CREATE DATABASE T;
GO

USE T;
GO

CREATE TABLE Clients(
    -- Unique identifier for each client
	ClientID INT IDENTITY(1,1) PRIMARY KEY,
    -- Client-specific number
	ClientNumber INT NOT NULL,
    -- First name of the client
	FirstName VARCHAR(30) NOT NULL,
    -- Last name of the client
	LastName VARCHAR(30) NOT NULL,
    -- Email address of the client
	Email VARCHAR(50) NOT NULL,
    -- User login username
	UserName VARCHAR(30) NOT NULL UNIQUE,
    -- User login password
	Password VARCHAR(150) NOT NULL UNIQUE,
    -- Gender of the client (BIT: 0 for male, 1 for female, for example)
	Gender BIT NOT NULL,
    -- Age of the client
	Age INT NOT NULL,
	-- Check if user have read terms and conditions
	ReadTerms BIT Default 0,
	-- This will store the amount user used on each category
	AmountUsed INT Default 0,
	-- Check if user have completed his Data information
	signup_completed BIT Default 0,
		-- this will store auto generated key to check
	AGK VARCHAR(20) Default 0,
	-- THIS WILL STORE THE AMOUNT OF TIMES USER CHANGED HIS PASSWORD
	HowManyTimes INT Default 0
);
GO

CREATE TABLE PasswordChangingTime(
	FPID INT IDENTITY(1,1) PRIMARY KEY,
	ClientID INT NOT NULL,
	ChangingTime DATETIME,
	FOREIGN KEY (ClientID) REFERENCES Clients(ClientID)
);
GO


-----------------------------------------------------------------------RESETPASSWORD1


CREATE PROCEDURE CHECKUSERNAMEANDEMAIL(
    @Username VARCHAR(30),
    @Email VARCHAR(50),
    @Result INT OUTPUT
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @UsernameExists BIT;
	BEGIN TRY
		-- Check if the username exists
		SELECT @UsernameExists = CASE WHEN EXISTS (SELECT 1 FROM Clients WHERE UserName = @Username) THEN 1 ELSE 0 END;
	
		IF @UsernameExists = 0
		BEGIN
			-- Username does not exist
			SET @Result = 1; -- Username not available in the database
			PRINT 'Username not available in the database';
		END
		ELSE
		BEGIN
			-- Username exists, now check if the provided email matches
			IF NOT EXISTS (SELECT 1 FROM Clients WHERE UserName = @Username AND Email = @Email)
			BEGIN
				-- Email does not match
				SET @Result = 2; -- Provided email does not match the one associated with the username
				PRINT 'Provided email does not match the one associated with the username';
			END
			ELSE
			BEGIN
				-- Username and email match
				SET @Result = 3; -- Procedure executed successfully
				PRINT 'Username and email match';
			END
		END
	END TRY
	BEGIN CATCH
		SET @Result = -991;
		PRINT 'Error: ' + ERROR_MESSAGE(); -- Print the error message for debugging
	END CATCH
END;
GO 


-----------------------------------------------------------------------AUTOGENERATEDKEY


CREATE PROCEDURE AUTOGENERATEDKEY
    @AGKClientID VARCHAR(25)
AS
BEGIN
    SET NOCOUNT ON;

    -- Generate a random 19-digit code
    DECLARE @RandomCode VARCHAR(19);
    SET @RandomCode = '';

    DECLARE @Digit CHAR(1);
    DECLARE @Counter INT = 1;

    WHILE @Counter <= 19
    BEGIN
        SET @Digit = CHAR(FLOOR(RAND() * 10) + 48);  -- Generate a random digit (0-9)
        SET @RandomCode = @RandomCode + @Digit;  -- Append the digit to the random code
        SET @Counter = @Counter + 1;
    END

    -- Update the AGK column in the Clients table
    UPDATE Clients
    SET AGK = @RandomCode
    WHERE ClientID = @AGKClientID;
END;
GO


-----------------------------------------------------------------------AUTOKEYINSERTER


CREATE PROCEDURE AUTOKEYINSERTER(
	@AKUsername VARCHAR(20),
	@Result INT OUTPUT
)
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @ClientID INT; 
		DECLARE @COUNTHMT INT;
		SELECT @ClientID = ClientID FROM Clients WHERE Username = @AKUsername;
		SELECT @COUNTHMT = HowManyTimes FROM Clients WHERE ClientID = @ClientID;
		IF @COUNTHMT = 5
		BEGIN
			SET @Result = 4; -- THIS MEANS THAT THE PASSWORD HAS BEEN RESET ABOUT 5 TIMES
			PRINT 'THIS MEANS THAT THE PASSWORD HAS BEEN RESET ABOUT 5 TIMES';
		END
		ELSE 
		BEGIN
			EXEC AUTOGENERATEDKEY @AGKClientID = @ClientID;
			SET @Result = 5; -- THIS MEAN THIS PROCEDURE WORKED PROPERLY
			PRINT 'THIS MEAN THIS PROCEDURE WORKED PROPERLY';
		END
	END TRY
	BEGIN CATCH
		-- Handle errors
		SET @Result = -992;
		PRINT 'Error: ' + ERROR_MESSAGE(); -- Print the error message for debugging
	END CATCH
END;
GO


-----------------------------------------------------------------------RESETPASSWORD2


CREATE PROCEDURE RESETPASSWORDFINAL(
	@Username VARCHAR(30),
	@Password VARCHAR(150),
	@VerifyAGK VARCHAR(20),
	@Result INT OUTPUT
)
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		DECLARE @COUNTHMT INT;
		DECLARE @ClientID INT;
		SELECT @ClientID = ClientID FROM Clients WHERE Username = @Username;
		SELECT @COUNTHMT = HowManyTimes FROM Clients;
		IF NOT EXISTS(SELECT * FROM Clients WHERE AGK = @VerifyAGK)
		BEGIN
			SET @Result = 6; -- The key user inserted is not the same as the one saved in the database
			PRINT 'The key user inserted is not the same as the one saved in the database';
		END
		ELSE
		BEGIN
			SET @COUNTHMT = @COUNTHMT + 1;
			UPDATE Clients SET Password = @Password WHERE Username = @Username;
			UPDATE Clients SET HowManyTimes = @COUNTHMT WHERE  Username = @Username;
			UPDATE Clients SET AGK = '0' WHERE Username = @Username;
			INSERT INTO PasswordChangingTime(ClientID, ChangingTime) VALUES(@ClientID, GETDATE());
			SET @Result = 7; -- All done, password changed
			PRINT 'All done, password changed';
		END
	END TRY
	BEGIN CATCH
		-- Handle errors
		SET @Result = -993;
		PRINT 'Error: ' + ERROR_MESSAGE(); -- Print the error message for debugging
	END CATCH
END;
GO

-- works hu-hu hu-hu hu-hu hu-hu hu-hu hu-hu hu-hu hu-hu hu-hu hu-hu hu-hu hu-hu hu-hu hu-hu hu-hu hu-hu hu-hu hu-hu hu-hu hu-hu hu-hu hu-hu hu-hu hu-hu hu-hu hu-hu


-- @Return Value from procedures
-- @Result = 1   -- Username not available in the database (CHECKUSERNAMEANDEMAIL)
-- @Result = 2   -- Provided email does not match the one associated with the username (CHECKUSERNAMEANDEMAIL)
-- @Result = 3   -- Username and email match (CHECKUSERNAMEANDEMAIL)
-- @Result = 4   -- THIS MEANS THAT THE PASSWORD HAS BEEN RESET ABOUT 5 TIMES (AUTOKEYINSERTER)
-- @Result = 5   -- THIS MEAN THIS PROCEDURE WORKED PROPERLY (AUTOKEYINSERTER)
-- @Result = 6   -- The key user inserted is not the same as the one saved in the database (RESETPASSWORDFINAL)
-- @Result = 7   -- All done, password changed (RESETPASSWORDFINAL)
-- @Result = 991 -- Print the error message for debugging (CHECKUSERNAMEANDEMAIL)
-- @Result = 992 -- Print the error message for debugging (AUTOKEYINSERTER)
-- @Result = 993 -- Print the error message for debugging (RESETPASSWORDFINAL)